generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  first_name     String
  last_name      String
  email          String
  clerk_id       String           @unique
  profile_image  String?
  subscribed     Boolean          @default(false)
  WeeklyGoal     WeeklyGoal[]
  WorkoutPlan    WorkoutPlan[]
  WorkoutSession WorkoutSession[]
  WorkoutStreaak WorkoutStreaak[]
}

model Muscle {
  name         String     @id
  primaryFor   Exercise[] @relation("PrimaryMuscles")
  secondaryFor Exercise[] @relation("SecondaryMuscles")
}

model Exercise {
  id           String   @id
  name         String?
  force        String?
  level        String?
  mechanic     String?
  equipment    String?
  category     String?
  instructions String[]
  images       String[]

  primaryMuscles   Muscle[] @relation("PrimaryMuscles")
  secondaryMuscles Muscle[] @relation("SecondaryMuscles")

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  Workout          Workout[]
  WorkoutSession   WorkoutSession? @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId String?
}

model Workout {
  id               String          @id @default(uuid())
  exercise         Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseId       String
  weight           Int
  reps             Int
  WorkoutPlan      WorkoutPlan?    @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId    String?
  duration         Int
  WorkoutSession   WorkoutSession? @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId String?
}

model WorkoutSession {
  id          String     @id @default(uuid())
  workouts    Workout[]
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  type        String //Upper body, lower body
  durationMin Int
  date        DateTime
  exercises   Exercise[]
  createdAt   DateTime   @default(now())
}

model WeeklyGoal {
  id                String        @id @default(uuid())
  WorkoutPlan       WorkoutPlan[]
  totalWorkouts     Int
  completedWorkouts Int
  weekStart         DateTime
  userId            String
  user              User          @relation(fields: [userId], references: [id])
}

model WorkoutStreaak {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  currentStreak Int      @default(0)
  longestStreak Int
  updatedAt     DateTime
}

model WorkoutPlanSetting {
  id                   String        @id @default(uuid())
  repGoal              Int
  timeGoal             Int
  weightGoal           Int
  totalWorkoutsPerWeek Int
  WorkoutPlan          WorkoutPlan[]
}

model WorkoutPlan {
  id       String    @id @default(uuid())
  workouts Workout[]

  workoutPlanSettings  WorkoutPlanSetting @relation(fields: [workoutPlanSettingId], references: [id])
  workoutPlanSettingId String

  weeklyGoals  WeeklyGoal @relation(fields: [weeklyGoalId], references: [id])
  weeklyGoalId String

  userId String
  user   User   @relation(fields: [userId], references: [id])
}
